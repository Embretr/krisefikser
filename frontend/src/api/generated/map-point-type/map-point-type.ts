/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Krisefikser API
 * This API exposes endpoints for the Krisefikser application.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import {
  computed,
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  MapPointType
} from '.././model';





/**
 * Retrieves a specific map point type by its ID
 * @summary Get a map point type by ID
 */
export const getMapPointTypeById = (
    id: MaybeRef<number>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MapPointType>> => {
    id = unref(id);
    
    return axios.default.get(
      `http://localhost:8080/api/map-point-types/${id}`,options
    );
  }


export const getGetMapPointTypeByIdQueryKey = (id: MaybeRef<number>,) => {
    return ['http:','localhost:8080','api','map-point-types',id] as const;
    }

    
export const getGetMapPointTypeByIdQueryOptions = <TData = Awaited<ReturnType<typeof getMapPointTypeById>>, TError = AxiosError<MapPointType>>(id: MaybeRef<number>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMapPointTypeById>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  getGetMapPointTypeByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMapPointTypeById>>> = ({ signal }) => getMapPointTypeById(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: computed(() => !!(unref(id))), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMapPointTypeById>>, TError, TData> 
}

export type GetMapPointTypeByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMapPointTypeById>>>
export type GetMapPointTypeByIdQueryError = AxiosError<MapPointType>


/**
 * @summary Get a map point type by ID
 */

export function useGetMapPointTypeById<TData = Awaited<ReturnType<typeof getMapPointTypeById>>, TError = AxiosError<MapPointType>>(
 id: MaybeRef<number>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMapPointTypeById>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMapPointTypeByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



/**
 * Updates an existing map point type by its ID
 * @summary Update a map point type
 */
export const updateMapPointType = (
    id: MaybeRef<number>,
    mapPointType: MaybeRef<MapPointType>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MapPointType>> => {
    id = unref(id);
mapPointType = unref(mapPointType);
    
    return axios.default.put(
      `http://localhost:8080/api/map-point-types/${id}`,
      mapPointType,options
    );
  }



export const getUpdateMapPointTypeMutationOptions = <TError = AxiosError<MapPointType>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMapPointType>>, TError,{id: number;data: MapPointType}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateMapPointType>>, TError,{id: number;data: MapPointType}, TContext> => {
    
const mutationKey = ['updateMapPointType'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateMapPointType>>, {id: number;data: MapPointType}> = (props) => {
          const {id,data} = props ?? {};

          return  updateMapPointType(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMapPointTypeMutationResult = NonNullable<Awaited<ReturnType<typeof updateMapPointType>>>
    export type UpdateMapPointTypeMutationBody = MapPointType
    export type UpdateMapPointTypeMutationError = AxiosError<MapPointType>

    /**
 * @summary Update a map point type
 */
export const useUpdateMapPointType = <TError = AxiosError<MapPointType>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMapPointType>>, TError,{id: number;data: MapPointType}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof updateMapPointType>>,
        TError,
        {id: number;data: MapPointType},
        TContext
      > => {

      const mutationOptions = getUpdateMapPointTypeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Deletes a map point type from the system
 * @summary Delete a map point type
 */
export const deleteMapPointType = (
    id: MaybeRef<number>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    id = unref(id);
    
    return axios.default.delete(
      `http://localhost:8080/api/map-point-types/${id}`,options
    );
  }



export const getDeleteMapPointTypeMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMapPointType>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMapPointType>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteMapPointType'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMapPointType>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMapPointType(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMapPointTypeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMapPointType>>>
    
    export type DeleteMapPointTypeMutationError = AxiosError<void>

    /**
 * @summary Delete a map point type
 */
export const useDeleteMapPointType = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMapPointType>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof deleteMapPointType>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteMapPointTypeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Retrieves a list of all map point types in the system
 * @summary Get all map point types
 */
export const getAllMapPointTypes = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MapPointType>> => {
    
    
    return axios.default.get(
      `http://localhost:8080/api/map-point-types`,options
    );
  }


export const getGetAllMapPointTypesQueryKey = () => {
    return ['http:','localhost:8080','api','map-point-types'] as const;
    }

    
export const getGetAllMapPointTypesQueryOptions = <TData = Awaited<ReturnType<typeof getAllMapPointTypes>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMapPointTypes>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  getGetAllMapPointTypesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllMapPointTypes>>> = ({ signal }) => getAllMapPointTypes({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllMapPointTypes>>, TError, TData> 
}

export type GetAllMapPointTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllMapPointTypes>>>
export type GetAllMapPointTypesQueryError = AxiosError<unknown>


/**
 * @summary Get all map point types
 */

export function useGetAllMapPointTypes<TData = Awaited<ReturnType<typeof getAllMapPointTypes>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMapPointTypes>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllMapPointTypesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



/**
 * Creates a new map point type in the system
 * @summary Create a new map point type
 */
export const createMapPointType = (
    mapPointType: MaybeRef<MapPointType>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MapPointType>> => {
    mapPointType = unref(mapPointType);
    
    return axios.default.post(
      `http://localhost:8080/api/map-point-types`,
      mapPointType,options
    );
  }



export const getCreateMapPointTypeMutationOptions = <TError = AxiosError<MapPointType>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMapPointType>>, TError,{data: MapPointType}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createMapPointType>>, TError,{data: MapPointType}, TContext> => {
    
const mutationKey = ['createMapPointType'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createMapPointType>>, {data: MapPointType}> = (props) => {
          const {data} = props ?? {};

          return  createMapPointType(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateMapPointTypeMutationResult = NonNullable<Awaited<ReturnType<typeof createMapPointType>>>
    export type CreateMapPointTypeMutationBody = MapPointType
    export type CreateMapPointTypeMutationError = AxiosError<MapPointType>

    /**
 * @summary Create a new map point type
 */
export const useCreateMapPointType = <TError = AxiosError<MapPointType>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMapPointType>>, TError,{data: MapPointType}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof createMapPointType>>,
        TError,
        {data: MapPointType},
        TContext
      > => {

      const mutationOptions = getCreateMapPointTypeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    