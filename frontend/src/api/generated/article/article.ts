/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Krisefikser API
 * This API exposes endpoints for the Krisefikser application.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import {
  computed,
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  ArticleDTO
} from '.././model';





/**
 * Retrieves a specific article by its ID
 * @summary Get an article by ID
 */
export const getArticleById = (
    id: MaybeRef<number>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArticleDTO>> => {
    id = unref(id);
    
    return axios.default.get(
      `http://localhost:8080/api/articles/${id}`,options
    );
  }


export const getGetArticleByIdQueryKey = (id: MaybeRef<number>,) => {
    return ['http:','localhost:8080','api','articles',id] as const;
    }

    
export const getGetArticleByIdQueryOptions = <TData = Awaited<ReturnType<typeof getArticleById>>, TError = AxiosError<ArticleDTO>>(id: MaybeRef<number>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArticleById>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  getGetArticleByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getArticleById>>> = ({ signal }) => getArticleById(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: computed(() => !!(unref(id))), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getArticleById>>, TError, TData> 
}

export type GetArticleByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getArticleById>>>
export type GetArticleByIdQueryError = AxiosError<ArticleDTO>


/**
 * @summary Get an article by ID
 */

export function useGetArticleById<TData = Awaited<ReturnType<typeof getArticleById>>, TError = AxiosError<ArticleDTO>>(
 id: MaybeRef<number>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArticleById>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetArticleByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



/**
 * Updates an existing article by its ID
 * @summary Update an article
 */
export const updateArticle = (
    id: MaybeRef<number>,
    articleDTO: MaybeRef<ArticleDTO>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArticleDTO>> => {
    id = unref(id);
articleDTO = unref(articleDTO);
    
    return axios.default.put(
      `http://localhost:8080/api/articles/${id}`,
      articleDTO,options
    );
  }



export const getUpdateArticleMutationOptions = <TError = AxiosError<ArticleDTO>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateArticle>>, TError,{id: number;data: ArticleDTO}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateArticle>>, TError,{id: number;data: ArticleDTO}, TContext> => {
    
const mutationKey = ['updateArticle'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateArticle>>, {id: number;data: ArticleDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateArticle(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateArticleMutationResult = NonNullable<Awaited<ReturnType<typeof updateArticle>>>
    export type UpdateArticleMutationBody = ArticleDTO
    export type UpdateArticleMutationError = AxiosError<ArticleDTO>

    /**
 * @summary Update an article
 */
export const useUpdateArticle = <TError = AxiosError<ArticleDTO>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateArticle>>, TError,{id: number;data: ArticleDTO}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof updateArticle>>,
        TError,
        {id: number;data: ArticleDTO},
        TContext
      > => {

      const mutationOptions = getUpdateArticleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Deletes an article from the system
 * @summary Delete an article
 */
export const deleteArticle = (
    id: MaybeRef<number>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    id = unref(id);
    
    return axios.default.delete(
      `http://localhost:8080/api/articles/${id}`,options
    );
  }



export const getDeleteArticleMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteArticle>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteArticle>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteArticle'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteArticle>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteArticle(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteArticleMutationResult = NonNullable<Awaited<ReturnType<typeof deleteArticle>>>
    
    export type DeleteArticleMutationError = AxiosError<void>

    /**
 * @summary Delete an article
 */
export const useDeleteArticle = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteArticle>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof deleteArticle>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteArticleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Retrieves a list of all articles in the system
 * @summary Get all articles
 */
export const getAllArticles = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArticleDTO>> => {
    
    
    return axios.default.get(
      `http://localhost:8080/api/articles`,options
    );
  }


export const getGetAllArticlesQueryKey = () => {
    return ['http:','localhost:8080','api','articles'] as const;
    }

    
export const getGetAllArticlesQueryOptions = <TData = Awaited<ReturnType<typeof getAllArticles>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllArticles>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  getGetAllArticlesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllArticles>>> = ({ signal }) => getAllArticles({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllArticles>>, TError, TData> 
}

export type GetAllArticlesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllArticles>>>
export type GetAllArticlesQueryError = AxiosError<unknown>


/**
 * @summary Get all articles
 */

export function useGetAllArticles<TData = Awaited<ReturnType<typeof getAllArticles>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllArticles>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllArticlesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



/**
 * Creates a new article in the system
 * @summary Create a new article
 */
export const createArticle = (
    articleDTO: MaybeRef<ArticleDTO>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArticleDTO>> => {
    articleDTO = unref(articleDTO);
    
    return axios.default.post(
      `http://localhost:8080/api/articles`,
      articleDTO,options
    );
  }



export const getCreateArticleMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createArticle>>, TError,{data: ArticleDTO}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createArticle>>, TError,{data: ArticleDTO}, TContext> => {
    
const mutationKey = ['createArticle'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createArticle>>, {data: ArticleDTO}> = (props) => {
          const {data} = props ?? {};

          return  createArticle(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateArticleMutationResult = NonNullable<Awaited<ReturnType<typeof createArticle>>>
    export type CreateArticleMutationBody = ArticleDTO
    export type CreateArticleMutationError = AxiosError<unknown>

    /**
 * @summary Create a new article
 */
export const useCreateArticle = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createArticle>>, TError,{data: ArticleDTO}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof createArticle>>,
        TError,
        {data: ArticleDTO},
        TContext
      > => {

      const mutationOptions = getCreateArticleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    